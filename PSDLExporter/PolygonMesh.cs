using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using UnityEngine;

namespace PSDLExporter
{
    /* A mesh consisting of any polygonal shapes
     * 
     */
    class PolygonMesh
    {
        public Vector3[] vertices;
        public int[][] polygons;
        public SortedDictionary<int, string> groups = new SortedDictionary<int, string>();

        /**
         * merge a list of meshes into one. This method is destructive and the old meshes should not be used!
         */
        public static PolygonMesh Merge(List<PolygonMesh> meshes, bool useFirstGroupOnly = false)
        {
            PolygonMesh combinedMesh = new PolygonMesh();

            // accumulate sizes
            int vertexCount = 0;
            int polyCount = 0;

            if (useFirstGroupOnly)
            {
                //TODO: only works for ascending dictionary! Is this true for the default dictionary?!
                combinedMesh.groups.Add(meshes[0].groups.First().Key, meshes[0].groups.First().Value);
            }

            Debug.Log("Calculate new group starts");
            for (int i = 0; i < meshes.Count; i++)
            {
                PolygonMesh mesh = meshes[i];
                if (!useFirstGroupOnly)
                {
                    foreach (KeyValuePair<int, string> pair in mesh.groups)
                    {
                        combinedMesh.groups.Add(pair.Key + polyCount, pair.Value);
                    }
                }
                vertexCount += mesh.vertices.Length;
                polyCount += mesh.polygons.Length;
            }

            combinedMesh.vertices = new Vector3[vertexCount];
            combinedMesh.polygons = new int[polyCount][];

            int vertexOffset = 0;
            int polyOffset = 0;

            Debug.Log("Copy geometry with offset");
            for (int i1 = 0; i1 < meshes.Count; i1++)
            {
                PolygonMesh mesh = meshes[i1];
                for (int i = 0; i < mesh.vertices.Length; i++)
                {
                    combinedMesh.vertices[i + vertexOffset] = mesh.vertices[i];
                }

                for (int i = 0; i < mesh.polygons.Length; i++)
                {
                    combinedMesh.polygons[i + polyOffset] = mesh.polygons[i];

                    // adjust vertex references. TODO: this will destroy the old mesh!!!
                    for(int j = 0; j < mesh.polygons[i].Length; j++)
                    {
                        combinedMesh.polygons[i + polyOffset][j] += vertexOffset;
                    }
                }

                vertexOffset += mesh.vertices.Length;
                polyOffset += mesh.polygons.Length;
            }

            return combinedMesh;
        }

        public void ExportToObj(string file, float scale)
        {
            StreamWriter writer = new StreamWriter(file);

            writer.WriteLine("#  Generated by Cities Skylines PSDL Exporter by NiAlBlack.");
            writer.WriteLine("mtllib output.mtl");

            // write all vertices
            for (int i = 0; i < vertices.Length; i++)
            {
                writer.WriteLine("v " + scale * vertices[i].z + " " + scale * vertices[i].y + " " + scale * vertices[i].x);
            }
            writer.WriteLine("#  " + vertices.Length + " vertices");
            writer.WriteLine("");

            // write each group
            int[] groupOffsets = new int[groups.Count + 1];
            Array.Copy( groups.Keys.ToArray(), groupOffsets, groups.Count);
            groupOffsets[groups.Count] = polygons.Length;

            for (int i = 0; i < groups.Count; i++)
            {
                writer.WriteLine("o " + groups[groupOffsets[i]]);
                for (int j = groupOffsets[i]; j < groupOffsets[i + 1]; j++)
                {
                    string face = "f";

                    for(int k = 0; k < polygons[j].Length; k++)
                    {
                        face += " " + (polygons[j][k] + 1); // OBJ indices start at 1
                    }
                    writer.WriteLine(face);
                }
            }

            writer.WriteLine("#  " + polygons.Length + " elements");

            writer.Flush();
            writer.Close();
        }
    }
}
